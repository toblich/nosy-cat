version: "3.7"

# Using base extension fields to avoid extra repetition
# See https://docs.docker.com/compose/compose-file/#extension-fields for details

x-base-build: &base-build
  context: .
  dockerfile: service.dockerfile

x-base-command: &base-command sh -c "npm run start:dockerized"
x-base-kafka-command: &base-kafka-command sh -c "./wait-for-it.sh $$KAFKA -t 30 -- npm run start:dockerized"

x-base-environment: &base-environment
  KAFKA: kafka:9093
  REDIS_HOST: redis
  GRAPH_HOST: graph-service
  GRAPH_PORT: "4000"
  DOCKER_INFLUXDB_INIT_ORG: nosy-cat
  DOCKER_INFLUXDB_INIT_BUCKET: default
  INFLUX_URL: http://influxdb:8086
  INFLUX_TOKEN_FILEPATH: &influx-token-filepath /influxdb-token.json
  ACCEPTED_STD_DEVIATIONS: 3

x-influx-token-volume: &influx-token-volume
  type: bind
  source: ./metrics-processor/influxdb-token
  target: *influx-token-filepath

############
# SERVICES #
############

services:
  ingress:
    build:
      <<: *base-build
      args:
        - SERVICE=ingress
    ports:
      - "3000:3000"
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./ingress/tsconfig.json:/project/app/tsconfig.json"
      - "./ingress/src:/project/app/src"
    depends_on:
      - kafka
    command: *base-kafka-command
    environment: *base-environment
    networks:
      - nosy-cat
      - default

  dependency-detector:
    build:
      <<: *base-build
      args:
        - SERVICE=dependency-detector
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./dependency-detector/tsconfig.json:/project/app/tsconfig.json"
      - "./dependency-detector/src:/project/app/src"
    command: *base-kafka-command
    depends_on:
      - graph-service
      - kafka
    environment: *base-environment
    networks:
      - default

  metrics-processor:
    build:
      <<: *base-build
      args:
        - SERVICE=metrics-processor
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./metrics-processor/tsconfig.json:/project/app/tsconfig.json"
      - "./metrics-processor/src:/project/app/src"
      - *influx-token-volume
    command: *base-kafka-command
    depends_on:
      - kafka
      - redis
    environment:
      <<: *base-environment
      INFLUX_FLUSH_INTERVAL_MS: 10000
      TIME_UNIT_IN_MS: 10000
    networks:
      - default

  anomaly-detector:
    build:
      <<: *base-build
      args:
        - SERVICE=anomaly-detector
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./anomaly-detector/tsconfig.json:/project/app/tsconfig.json"
      - "./anomaly-detector/src:/project/app/src"
    command: *base-kafka-command
    depends_on:
      - graph-service
      - kafka
    environment:
      <<: *base-environment
    networks:
      - default

  graph-service:
    build:
      <<: *base-build
      args:
        - SERVICE=graph-service
    ports:
      - "4000:4000"
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./graph-service/tsconfig.json:/project/app/tsconfig.json"
      - "./graph-service/jest.config.js:/project/app/jest.config.js"
      - "./graph-service/src:/project/app/src"
    command: sh -c "./wait-for-it.sh $$NEO4J_STATUS -t 30 -- npm run start:dockerized"
    depends_on:
      - redis
      - neo4j
    environment:
      <<: *base-environment
      NEO4J_HOST: neo4j://neo4j:7687
      NEO4J_STATUS: http://neo4j:7474
    networks:
      - default

  neo4j:
    image: bitnami/neo4j:4.1.3
    ports:
      - "7474:7474" # http
      - "7473:7473" # https
      - "7687:7687" # bolt
    ## Uncomment the following lines to enable data persistence
    # volumes:
    #   - "./graph-data:/bitnami"
    environment:
      ##########
      # WARNING: To have Neo4J Browser running on host communicate with neo4j properly, edit /etc/hosts on
      # your machine and make the domain "neo4j" map to "127.0.0.1"
      # Docs on how to edit that file (macOS): https://www.inmotionhosting.com/support/website/software/how-to-edit-your-hosts-file-on-a-mac/
      ##########
      # Advertise domain instead of ip so that calls from other containers and the host machine do a different
      # dns resolution (docker container ip  for other containers, localhost for browser as the ports are exposed)
      NEO4J_HOST: "neo4j"
    networks:
      - default

  browser-proxy:
    image: nginx:1.17
    ports:
      - "80:80"

  pagerduty-integration:
    build:
      <<: *base-build
      args:
        - SERVICE=pagerduty-integration
    volumes:
      - "./nodemon.json:/project/nodemon.json"
      - "./helpers/tsconfig.json:/project/helpers/tsconfig.json"
      - "./helpers/declarations:/project/helpers/declarations"
      - "./helpers/src:/project/helpers/src"
      - "./pagerduty-integration/tsconfig.json:/project/app/tsconfig.json"
      - "./pagerduty-integration/src:/project/app/src"
    command: *base-kafka-command
    depends_on:
      - kafka
    environment:
      <<: *base-environment
    networks:
      - default

  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - "2181"
    networks:
      - default

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    networks:
      - default

  kowl:
    image: quay.io/cloudhut/kowl:v1.1.0
    volumes:
      - ./kowl.yml:/etc/kowl/config.yaml
    ports:
      - "8080:8080"
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka
    networks:
      - default

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - default

  redis-cli:
    image: redis
    depends_on:
      - redis
    command: redis-cli -h redis
    networks:
      - default

  redis-insight:
    image: redislabs/redisinsight
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - default

  influxdb:
    image: influxdb:2.0
    environment:
      <<: *base-environment
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: nosy-cat
      DOCKER_INFLUXDB_INIT_PASSWORD: tobi&joni
      STARTUP_SCRIPT_LOGFILE: /home/influxdb/setup.log # Must be writable by influxdb user
    volumes:
      - *influx-token-volume
      - "./metrics-processor/src/influx-setup.sh:/docker-entrypoint-initdb.d/setup.sh"
    ports:
      - "8086:8086"
    networks:
      - default

networks:
  nosy-cat:
    driver: bridge
  default:
    driver: bridge
